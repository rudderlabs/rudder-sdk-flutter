import 'package:test/test.dart';
import 'package:rudder_sdk_flutter_platform_interface/src/utils.dart';

void main() {
  test('conversion of datestring object to string in format YY-MM-dd', () {
    final DateTime date = DateTime(2020, 12, 12);
    expect(Utils.toDateString(date), equals("20-12-12"));
    final DateTime date2 = DateTime(2022, 7, 25);
    expect(Utils.toDateString(date2), equals("22-07-25"));
    final DateTime date3 = DateTime(2023, 1, 13);
    expect(Utils.toDateString(date3), equals("23-01-13"));
    final DateTime date4 = DateTime(2024, 1, 7);
    expect(Utils.toDateString(date4), equals("24-01-07"));
  });

  test('is invalid number', () {
    expect(Utils.isInvalidNumber(1), equals(false));
    expect(Utils.isInvalidNumber(0), equals(false));
    expect(Utils.isInvalidNumber(-1), equals(false));
    expect(Utils.isInvalidNumber(1.0), equals(false));
    expect(Utils.isInvalidNumber(35.34), equals(false));
    expect(Utils.isInvalidNumber(double.infinity), equals(true));
    expect(Utils.isInvalidNumber(double.negativeInfinity), equals(true));
    expect(Utils.isInvalidNumber(double.nan), equals(true));
    expect(Utils.isInvalidNumber(double.minPositive), equals(true));
    expect(Utils.isInvalidNumber(double.maxFinite), equals(true));
  });

  test('remove invalid numbers from map', () {
    Map<String, dynamic> invalidNumbersMap = {};
    invalidNumbersMap["key1"] = 1;
    invalidNumbersMap["key2"] = 1.0;
    invalidNumbersMap["key3"] = 35.34;
    invalidNumbersMap["key4"] = double.infinity;
    invalidNumbersMap["key5"] = double.negativeInfinity;
    invalidNumbersMap["key6"] = double.nan;
    invalidNumbersMap["key7"] = double.minPositive;
    invalidNumbersMap["key8"] = double.maxFinite;
    invalidNumbersMap["key9"] = "value1";
    // now lets add a nested map which contains some valid and invalid numbers
    Map<String, dynamic> nestedMap = {};
    nestedMap["key3"] = 35.34;
    nestedMap["key5"] = double.negativeInfinity;
    nestedMap["key6"] = double.nan;
    nestedMap["key9"] = "value1";
    invalidNumbersMap["key10"] = nestedMap;
    // now lets add a nested list which contains some valid and invalid numbers and list also contains a map which contains some valid and invalid numbers
    List<dynamic> list = [];
    list.add(1);
    list.add(1.0);
    list.add(35.34);
    list.add(double.infinity);
    list.add(double.negativeInfinity);
    list.add(double.nan);
    list.add(double.minPositive);
    list.add(double.maxFinite);
    list.add("value1");
    Map<String, dynamic> nestedMap2 = {};
    nestedMap2["key3"] = 35.34;
    nestedMap2["key5"] = double.negativeInfinity;
    nestedMap2["key6"] = double.nan;
    nestedMap2["key9"] = "value1";
    list.add(nestedMap2);
    invalidNumbersMap["key11"] = list;
    Utils.removeInvalidNumbers(invalidNumbersMap);
    expect(invalidNumbersMap.length, equals(6));
    expect(invalidNumbersMap.containsKey("key1"), equals(true));
    expect(invalidNumbersMap.containsKey("key2"), equals(true));
    expect(invalidNumbersMap.containsKey("key3"), equals(true));
    expect(invalidNumbersMap.containsKey("key4"), equals(false));
    expect(invalidNumbersMap.containsKey("key5"), equals(false));
    expect(invalidNumbersMap.containsKey("key6"), equals(false));
    expect(invalidNumbersMap.containsKey("key7"), equals(false));
    expect(invalidNumbersMap.containsKey("key8"), equals(false));
    expect(invalidNumbersMap.containsKey("key9"), equals(true));
    expect(invalidNumbersMap.containsKey("key10"), equals(true));
    Map<String, dynamic> nestedMap3 = invalidNumbersMap["key10"];
    expect(nestedMap3.length, equals(2));
    expect(nestedMap3.containsKey("key3"), equals(true));
    expect(nestedMap3.containsKey("key5"), equals(false));
    expect(nestedMap3.containsKey("key6"), equals(false));
    expect(nestedMap3.containsKey("key9"), equals(true));
    List<dynamic> list1 = invalidNumbersMap["key11"];
    expect(list1.length, equals(5));
    expect(list1[0], equals(1));
    expect(list1[1], equals(1.0));
    expect(list1[2], equals(35.34));
    expect(list1[3], equals("value1"));
    Map<String, dynamic> nestedMap4 = list1[4];
    expect(nestedMap4.length, equals(2));
    expect(nestedMap4.containsKey("key3"), equals(true));
    expect(nestedMap4.containsKey("key5"), equals(false));
    expect(nestedMap4.containsKey("key6"), equals(false));
    expect(nestedMap4.containsKey("key9"), equals(true));
  });

  test('remove invalid numbers from list', () {
    List<dynamic> invalidNumbersList = [];
    invalidNumbersList.add(1);
    invalidNumbersList.add(1.0);
    invalidNumbersList.add(35.34);
    invalidNumbersList.add(double.infinity);
    invalidNumbersList.add(double.negativeInfinity);
    invalidNumbersList.add(double.nan);
    invalidNumbersList.add(double.minPositive);
    invalidNumbersList.add(double.maxFinite);
    invalidNumbersList.add("value1");
    // now lets add a nested map which contains some valid and invalid numbers
    Map<String, dynamic> nestedMap = {};
    nestedMap["key3"] = 35.34;
    nestedMap["key5"] = double.negativeInfinity;
    nestedMap["key6"] = double.nan;
    nestedMap["key9"] = "value1";
    invalidNumbersList.add(nestedMap);
    // now lets add a nested list which contains some valid and invalid numbers and list also contains a map which contains some valid and invalid numbers
    List<dynamic> list = [];
    list.add(1);
    list.add(1.0);
    list.add(35.34);
    list.add(double.infinity);
    list.add(double.negativeInfinity);
    list.add(double.nan);
    list.add(double.minPositive);
    list.add(double.maxFinite);
    list.add("value1");
    Map<String, dynamic> nestedMap2 = {};
    nestedMap2["key3"] = 35.34;
    nestedMap2["key5"] = double.negativeInfinity;
    nestedMap2["key6"] = double.nan;
    nestedMap2["key9"] = "value1";
    list.add(nestedMap2);
    invalidNumbersList.add(list);
    Utils.removeInvalidNumbersFromList(invalidNumbersList);
    expect(invalidNumbersList.length, equals(6));
    expect(invalidNumbersList[0], equals(1));
    expect(invalidNumbersList[1], equals(1.0));
    expect(invalidNumbersList[2], equals(35.34));
    expect(invalidNumbersList[3], equals("value1"));
    Map<String, dynamic> nestedMap3 = invalidNumbersList[4];
    expect(nestedMap3.length, equals(2));
    expect(nestedMap3.containsKey("key3"), equals(true));
    expect(nestedMap3.containsKey("key5"), equals(false));
    expect(nestedMap3.containsKey("key6"), equals(false));
    expect(nestedMap3.containsKey("key9"), equals(true));
    List list1 = invalidNumbersList[5];
    expect(list1.length, equals(5));
    expect(list1[0], equals(1));
    expect(list1[1], equals(1.0));
    expect(list1[2], equals(35.34));
    expect(list1[3], equals("value1"));
    Map<String, dynamic> nestedMap4 = list1[4];
    expect(nestedMap4.length, equals(2));
    expect(nestedMap4.containsKey("key3"), equals(true));
    expect(nestedMap4.containsKey("key5"), equals(false));
    expect(nestedMap4.containsKey("key6"), equals(false));
    expect(nestedMap4.containsKey("key9"), equals(true));
  });
}
